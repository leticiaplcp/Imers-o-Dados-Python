# -*- coding: utf-8 -*-
"""Imersão - Alura

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zfKHN_Gd3ooc4U2d-C-kTm-cKstwaAVY

# **Aula 1 - Imersão**
"""

import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/guilhermeonrails/data-jobs/refs/heads/main/salaries.csv")

"""DF: Apelido do arquivo

pd: Apelido que demos para a biblioteca

read.csv: Vai exibir as linhas do arquivo CSV
"""

df.head()

"""head: comando da biblioteca"""

df.info()

df.describe()

df.shape

linhas, colunas = df.shape[0], df.shape[1]
print("linhas: ", linhas)
print("Colunas: ", colunas)

df.columns

renomear_colunas={
    'work_year': 'ano',
    'experience_level': 'senioridade',
    'employment_type': 'contrato',
    'job_title': 'cargo',
    'salary': 'salario',
    'salary_currency': 'moeda',
    'salary_in_usd': 'usd',
    'employee_residence': 'residencia',
    'remote_ratio': 'remoto',
    'company_location': 'empresa',
    'company_size': 'tamanho_empresa'
}
df.rename(columns=renomear_colunas, inplace=True)
df.columns

df["senioridade"].value_counts()

df["contrato"].value_counts()

df["remoto"].value_counts()

df["tamanho_empresa"].value_counts()

senioridade = {
    'SE': 'Senior',
    'MI': 'Pleno',
    'EN': 'Junior',
    'EX': 'Executivo'
}

df["senioridade"] = df["senioridade"].replace(senioridade)
df["senioridade"].value_counts()

contrato = {
    'FT': 'Tempo Integral',
    'PT': 'Tempo Parcial',
    'FL': 'Frellance',
    'CT': 'Contrato'
}

df["contrato"] = df["contrato"].replace(contrato)
df["contrato"].value_counts()

tamanho_empresa = {
    'S': 'Pequena',
    'M': 'Media',
    'L': 'Grande',
}

df["tamanho_empresa"] = df["tamanho_empresa"].replace(tamanho_empresa)
df["tamanho_empresa"].value_counts()

remoto = {
    0: 'Presencial',
    50: 'Hibrido',
    100: 'Remoto',
}

df["remoto"] = df["remoto"].replace(remoto)
df["remoto"].value_counts()

df.head()

df.describe(include=object)

df.describe()

"""# **Aula 2 - Imersão**"""

df.isnull()

df.head()

df.isnull().sum()

df['ano'].unique()

df[df.isnull().any(axis=1)]

#importando a biblioteca e apelidando
import numpy as np

#Criação de um datagrame de teste para usar de exemplo
df_salarios = pd.DataFrame({
      'nome': ["Ana", "Bruno", "Carlos", "Daniele", "Val"],
      'salario': [4000, np.nan, 5000, np.nan, 100000]
})

#calcula a media salarial e substitui os nulos pela media e arrendonda os valores
df_salarios['salario_media'] = df_salarios['salario'].fillna(df_salarios['salario'].mean().round(2))

#Calcula a mediana e substitui os nulos pela mediana
df_salarios['salario_mediana'] = df_salarios['salario'].fillna(df_salarios['salario'].median())

#exibindo
df_salarios

df_temperaturas = pd.DataFrame({
    "Dia": ["Segunda", "Terça", "Quarta", "Quinta", "Sexta"],
    "Temperatura": [30, np.nan, np.nan, 28, 27]

})

df_temperaturas["preenchido_ffill"] = df_temperaturas["Temperatura"].ffill()
df_temperaturas

df_temperaturas = pd.DataFrame({
    "Dia": ["Segunda", "Terça", "Quarta", "Quinta", "Sexta"],
    "Temperatura": [30, np.nan, np.nan, 28, 27]

})

df_temperaturas["preenchido_bfill"] = df_temperaturas["Temperatura"].bfill()
df_temperaturas

df_cidades = pd.DataFrame({
    'nome': ["Ana", "Bruno", "Carlos", "Daniele", "Val"],
    'cidade': ["São Paulo", np.nan, "Curitiba", np.nan, "Belém"],
})

df_cidades['cidade_preenchida'] = df_cidades['cidade'].fillna("Não informado")
df_cidades

df_limpo = df.dropna()

df_limpo.isnull().sum()

df_limpo.head()

df_limpo.info()

df_limpo = df_limpo.assign(ano = df_limpo["ano"].astype('int64'))
df_limpo.info()

"""# **Aula 3 - Imersão**"""

df_limpo.head()

df_limpo["senioridade"].value_counts().plot(kind="bar", title="Distribuição de senioridade")

import seaborn as sns

sns.barplot(data=df_limpo, x="senioridade", y="usd")

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 5))
sns.barplot(data=df_limpo, x="senioridade", y="usd")
plt.title("Salário médio por senioridade")
plt.xlabel('Senioridade')
plt.ylabel('Salário médio anual (USD)')
plt.show()

df_limpo.groupby("senioridade")["usd"].mean().sort_values(ascending=False)

ordem = df_limpo.groupby("senioridade")["usd"].mean().sort_values(ascending=False).index

ordem

plt.figure(figsize=(8, 5))
sns.barplot(data=df_limpo, x="senioridade", y="usd", order=ordem)
plt.title("Salário médio por senioridade")
plt.xlabel('Senioridade')
plt.ylabel('Salário médio anual (USD)')
plt.show()

plt.figure(figsize=(8, 4))
sns.histplot(df_limpo['usd'], bins = 50, kde=True)
plt.title("Distribuição dos salários anuais")
plt.xlabel('Salario em USD')
plt.ylabel('Fraquência')
plt.show()

plt.figure(figsize=(8, 4))
sns.boxplot(x=df_limpo['usd'])
plt.title("boxplot Salário")
plt.xlabel('Salario em USD')
plt.show()

df_limpo['senioridade'].unique()

ordem_senioridade = ['Junior', 'Pleno', 'Senior', 'Executivo']

plt.figure(figsize=(8, 5))
sns.boxplot(x='senioridade', y='usd', data=df_limpo, order=ordem_senioridade)
plt.title("Boxplot da distribuição de Salário por Senioridade")
plt.xlabel('Senioridade')
plt.ylabel('Salário em USD')
plt.show()

ordem_senioridade = ['Junior', 'Pleno', 'Senior', 'Executivo']

plt.figure(figsize=(8, 5))
sns.boxplot(x='senioridade', y='usd', data=df_limpo, order=ordem_senioridade, palette='Set2', hue='senioridade')
plt.title("Boxplot da distribuição de Salário por Senioridade")
plt.xlabel('Senioridade')
plt.ylabel('Salário em USD')
plt.show()

import plotly.express as px

fig = px.bar(df_limpo.groupby("senioridade")["usd"].mean().reset_index(),
             x="senioridade",
             y="usd",
             title="Média Salarial por Senioridade",
             labels={'senioridade': 'Senioridade', 'usd': 'Média Salarial (USD)'},
             category_orders={'senioridade': ordem_senioridade}
            )
fig.show()

remoto_contagem = df_limpo['remoto'].value_counts().reset_index()
remoto_contagem.columns = ['tipo_trabalho', 'quantidade']
fig = px.pie(remoto_contagem,
             names='tipo_trabalho',
             values='quantidade',
             title='Proproção dos tipos de trabalhos')
fig.show()

remoto_contagem = df_limpo['remoto'].value_counts().reset_index()
remoto_contagem.columns = ['tipo_trabalho', 'quantidade']
fig = px.pie(remoto_contagem,
             names='tipo_trabalho',
             values='quantidade',
             title='Proproção dos tipos de trabalhos',
             hole=0.5)
fig.update_traces(textinfo='percent+label')
fig.show()